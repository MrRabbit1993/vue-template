{
  "compilerOptions": {
    "target": "ES2020", // 指定TS编译成ECMAScript目标版本
    "useDefineForClassFields": true, // 此标志用作迁移到即将推出的类字段标准版本的一部分，默认：false
    "module": "ESNext", // 指定编译后代码使用的模块化规范
    "lib": ["ES2020", "DOM", "DOM.Iterable"], // 用于指定要包含在编译中的库文件(指定项目运行时使用的库)
    "skipLibCheck": true, // 是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间，默认：false。

    /* Bundler mode */
    "moduleResolution": "bundler", // 模块解析策略
    "allowImportingTsExtensions": true, // 是否允许在 import 语句中导入 .ts 文件扩展名
    "resolveJsonModule": true, // 是否解析 JSON 模块
    "isolatedModules": true, // 是否将每个文件转换为单独的模块，它不可以和declaration同时设定
    "moduleDetection": "force",
    "noEmit": true, // 不生成编译文件，即编译后不会生成任何js文件
    "jsx": "preserve",

    /* Linting */
    "strict": true, // 启用所有严格检查选项
    "noUnusedLocals": true, // 检查只声明、未使用的局部变量(只提示不报错) 可以配合eslint来
    "noUnusedParameters": true, // 检查未使用的函数参数(只提示不报错) 可以配合eslint来
    "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)

    "baseUrl": ".", // 解析非相对模块名的基准目录
    "typeRoots": ["./node_modules/vue/types"],
    "importHelpers": true, // 从tslib导入辅助工具函数
    "paths": {
      // 别名，基于baseUrl的路径映射的列表
      "@/*": ["src/*"]
    }
  },
  // 使用"include"引入的文件可以使用"exclude"属性过滤。 然而，通过"files"属性明确指定的文件却总是会被包含在内，不管"exclude"如何设置
  // 任何被"files"或"include"指定的文件所引用的文件也会被包含进来
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"] // 指定被编译文件所在的目录
}
